from aiogram import F, Router
from aiogram import Bot, Dispatcher, types
from Config import exemplyar_bot
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.enums import ContentType

from Sub.Subjects import dict_directions

from keyboards import keyboard as kb
from Database.Database import DatabaseClass

from AdminPanel.Admins import admins


bot = exemplyar_bot.bot #–í–∑—è—Ç–æ –∏–∑ —Ñ–∞–π–ª–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞, –≥–¥–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è —Ç–æ–∫–µ–Ω

router = Router()


class NewMentor(StatesGroup): #—Ö—Ä–∞–Ω–∏–ª–∏—â–µ –º–∞—à–∏–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω—Ç–æ—Ä–∞
    mentor_name = State() #–ò–º—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞
    card_name = State() #–ò–º—è –∫–∞—Ä—Ç–æ—á–∫–∏
    id_tg_user_id = State() #–∞–π–¥–∏ —é–∑–µ—Ä–∞ –≤ –±–∞–∑–µ
    photo_mentor = State() #—Ñ–æ—Ç–æ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞
    description_mentor = State() #–æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ
    directions = State() #–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
    price = State() #—Å—Ç–æ–∏–º–æ–∏—Ç—å
    google_drive = State() #—Å—Å—ã–ª–∫–∞ –Ω–∞ –≥—É–≥–ª –¥–∏—Å–∫

@router.message(F.text == '–û—Ç–º–µ–Ω–∞')
async def cancellation(message: Message, state: FSMContext):
    await bot.send_message(message.from_user.id,
                           f"<b>{message.from_user.first_name}</b>, "
                           f"–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –ø–æ –Ω–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤—É\n\n"
                           f"–ï—Å–ª–∏ –∂–µ–ª–∞–µ—Ç–µ –∏–∑—É—á–∏—Ç—å –ø–ª–æ—â–∞–¥–∫—É, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ªüëá\n<b>¬´–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µüåç¬ª</b>",
                           reply_markup=kb.main_menu)
    await state.clear()  # –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

@router.callback_query(F.data == '–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É')
async def new_mentor(callback: CallbackQuery, state: FSMContext):
    await state.clear() #–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await callback.answer()  # —á—Ç–æ–±—ã –ø—Ä–æ–ø–∞–ª–∏ —á–∞—Å–∏–∫–∏
    await bot.delete_message(callback.from_user.id, callback.message.message_id)

    await bot.send_message(callback.from_user.id,
                           f"–ù–∞–ø–∏—à–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ "
                           f"–ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–º–µ–Ω–∞¬ª, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é",
                           reply_markup=kb.cancellation)
    await state.set_state(NewMentor.mentor_name)

@router.message(NewMentor.mentor_name)
async def new_mentor_name(message: Message, state: FSMContext):
    if len(message.text) > 35:
        await bot.send_message(message.from_user.id,
                               "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—á–µ")
    else:
        await state.update_data(OfficialName=message.text)
        data = await state.get_data()
        await bot.send_message(message.from_user.id,
                               "–ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –∫–∞—Ä—Ç–æ—á–∫–∏")
        await state.set_state(NewMentor.card_name)

import re
def is_english(text): #–ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã –∏–º—è –∫–∞—Ä—Ç–æ—á–∫–∏ –±—ã–ª–æ –Ω–∞–ø–∏—Å–∞–Ω–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–º–∏ –±—É–∫–≤–∞–º
    return bool(re.match('^[A-Za-z0-9_]+$', text))

@router.message(NewMentor.card_name)
async def new_mentor_card_name(message: Message, state: FSMContext):
    if is_english(text=message.text):
        admin_bd = DatabaseClass(TgUserID=message.from_user.id)
        name_check = await admin_bd.select_rows(SelectQuery=f"SELECT Id FROM mentors WHERE "
                                                      f"Name = '/{message.text}' "
                                                      f"AND Activity = 1;")

        if len(name_check) == 0: #–º–µ–Ω—Ç–æ—Ä–∞ —Å —Ç–∞–∫–æ–π –∫–∞—Ä—Ç–æ—á–∫–æ–π –Ω–µ—Ç –≤ –±–∞–∑–µ, –ø–æ—ç—Ç–æ–º—É –≤—Å—ë –ø–æ–¥—Ö–æ–¥–∏—Ç –∏ –∏–¥—ë–º –¥–∞–ª—å—à–µ
            if len(message.text) > 35:
                await bot.send_message(message.from_user.id,
                                       "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è –∫–∞—Ä—Ç–æ—á–∫–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—á–µ")
            else:
                await state.update_data(CardName=message.text)
                await bot.send_message(message.from_user.id,
                                       "–ù–∞–ø–∏—à–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                await state.set_state(NewMentor.id_tg_user_id)
        else:
            await bot.send_message(message.from_user.id,
                                   "–ú–µ–Ω—Ç–æ—Ä —Å —Ç–∞–∫–æ–π –∫–∞—Ä—Ç–æ—á–∫–æ–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏")

    else:
        await bot.send_message(message.from_user.id,
                                   "–ò–º—è –∫–∞—Ä—Ç–æ—Ç–æ—á–∫–∏ –ø–∏—à–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ, "
                                   "–Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∞–∂—Ç—å –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤")


@router.message(NewMentor.id_tg_user_id)
async def new_mentor_id(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä
    if re.match('^[0-9]+$', message.text):
        mentor_db = DatabaseClass(TgUserID=int(message.text))

        if await mentor_db.check_user_in_the_list() == True:
            id_user_mentor = (await mentor_db.select_user()).get('Id')
            await state.update_data(IdUserMentor=id_user_mentor)
            await bot.send_message(message.from_user.id,
                                   "–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞")
            await state.set_state(NewMentor.photo_mentor)

        else:
            await bot.send_message(message.from_user.id,
                                   "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º id "
                                   "–Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ id")

    else:
        await bot.send_message(message.from_user.id,
                               "id –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä")


@router.message(lambda message: message.content_type != ContentType.PHOTO, NewMentor.photo_mentor)
async def handle_no_photo(message: Message, state: FSMContext):
    await bot.send_message(message.from_user.id,
                           "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞")
@router.message(lambda message: message.content_type == ContentType.PHOTO, NewMentor.photo_mentor)
async def handle_photo(message: Message, state: FSMContext):
    await state.update_data(PhotoMentor=message.photo[-1].file_id)
    await bot.send_message(message.from_user.id,
                           f"–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞.\n"
                           f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ - 150 —Å–∏–º–≤–æ–ª–æ–≤")
    await state.set_state(NewMentor.description_mentor)


@router.message(NewMentor.description_mentor)
async def description_mentor(message: Message, state: FSMContext):
    if len(message.text) > 150:
        await bot.send_message(message.from_user.id,
                               "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—á–µ")
    else:
        await state.update_data(DescriptionMentor=message.text)
        str_directions = ", ".join(list(dict_directions.values()))
        await bot.send_message(message.from_user.id,
                               f"{str_directions}")
        await bot.send_message(message.from_user.id,
                               f"‚òùÔ∏è–°–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π. –ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ –∫–∞–∫–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é "
                               f"–±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫")
        await state.set_state(NewMentor.directions)


@router.message(NewMentor.directions)
async def directions(message: Message, state: FSMContext):
    if message.text in list(dict_directions.values()): #–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —á—Ç–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–∏—Å–∞–Ω–æ –∞–¥–º–∏–Ω–æ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ
        await state.update_data(Directions=message.text)
        await bot.send_message(message.from_user.id,
                               f"–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏—è —Å –º–µ–Ω—Ç–æ—Ä–æ–º\n"
                               f"–ü—Ä–∏–º–µ—Ä: ¬´1500—Ä –∑–∞ –∑–∞–Ω—è—Ç–∏–µ¬ª –∏–ª–∏ ¬´250.000—Ä –∑–∞ –∫—É—Ä—Å/–≤–µ–¥–µ–Ω–∏–µ¬ª")
        await state.set_state(NewMentor.price)
    else:
        await bot.send_message(message.from_user.id,
                               f"–¢–∞–∫–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, –Ω–∞–ø–∏—à–∏—Ç–µ –¥—Ä—É–≥–æ–µ")



@router.message(NewMentor.price)
async def price(message: Message, state: FSMContext):
    if len(message.text) > 35:
        await bot.send_message(message.from_user.id,
                               f"–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—á–µ")
    else:
        await state.update_data(Price=message.text)
        await bot.send_message(message.from_user.id,
                               f"–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—É–≥–ª –¥–∏—Å–∫")

        await state.set_state(NewMentor.google_drive)

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ Google Drive
GOOGLE_DRIVE_LINK_PATTERN = re.compile(r'https://docs.google.com/\S+')

@router.message(NewMentor.google_drive)
async def google_drive(message: Message, state: FSMContext):
    if GOOGLE_DRIVE_LINK_PATTERN.match(message.text):
        await state.update_data(GoogleDrive=message.text)

        data = await state.get_data()

        new_mentor_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='–°–æ–∑–¥–∞—Ç—å', callback_data='–°–æ–∑–¥–∞—Ç—å –º–µ–Ω—Ç–æ—Ä–∞')],
            [InlineKeyboardButton(text='–°–±—Ä–æ—Å–∏—Ç—å', callback_data='–û—Ç–º–µ–Ω–∞ –ø–æ—Å—Ç–∞')]
        ])

        await bot.send_photo(chat_id=message.from_user.id,
                             photo=data['PhotoMentor'],
                             caption=f"<b>{data['OfficialName']}</b>\n{data['CardName']}\n"
                                     f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {data['Directions']}\n\n"
                                     f"{data['DescriptionMentor']}\n"
                                     f"<a href='{data['GoogleDrive']}'>–ø–æ–¥—Ä–æ–±–Ω–µ–µ..</a>\n\n"
                                     f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {data['Price']}",
                             reply_markup=new_mentor_kb)
    else:
        await bot.send_message(message.from_user.id,
                               f"–≠—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞ –Ω–∞ –≥—É–≥–ª –¥–∏—Å–∫. –ü—Ä–∏—à–ª–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ")


@router.callback_query(F.data == '–°–æ–∑–¥–∞—Ç—å –º–µ–Ω—Ç–æ—Ä–∞')
async def created_mantor(callback: CallbackQuery, state: FSMContext):
    await callback.answer()  # —á—Ç–æ–±—ã –ø—Ä–æ–ø–∞–ª–∏ —á–∞—Å–∏–∫–∏
    await bot.delete_message(callback.from_user.id, callback.message.message_id)

    data = await state.get_data()

    admin_bd = DatabaseClass(TgUserID=callback.from_user.id)

    try:
        import random
        await admin_bd.insert_query(InsertQuery=f"INSERT INTO mentors(OfficialName, Name, IdTgUserId, Photo, Description, Subject, Price, DetailedInformation, CallOrder) " 
                                       f"VALUES ('{data['OfficialName']}', '/{data['CardName']}', {data['IdUserMentor']}, '{data['PhotoMentor']}', '{data['DescriptionMentor']}', '{data['Directions']}', '{data['Price']}', '{data['GoogleDrive']}', {random.randint(30, 500)});")
        await bot.send_message(callback.from_user.id,
                               f"–ù–æ–≤—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ωüëå",
                               reply_markup=kb.main_menu)
    except Exception as ex:
        await bot.send_message(callback.from_user.id,
                               f"–û—à–∏–±–∫–∞. –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É",
                               reply_markup=kb.main_menu)

    await state.clear()  # –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

