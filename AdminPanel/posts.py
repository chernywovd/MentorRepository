from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

import asyncio

from aiogram import F, Router
from aiogram import Bot, Dispatcher, types
from Config import exemplyar_bot
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.enums import ContentType
from aiogram.filters import Command
from keyboards import keyboard as kb
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton


from Functions.SearchDescription import search_direction

from Database.Database import DatabaseClass

bot = exemplyar_bot.bot #–í–∑—è—Ç–æ –∏–∑ —Ñ–∞–π–ª–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞, –≥–¥–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è —Ç–æ–∫–µ–Ω

router = Router()

class Post(StatesGroup): #—Ö—Ä–∞–Ω–∏–ª–∏—â–µ –º–∞—à–∏–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤
    text_post = State() #—Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
    photo_post = State()  # —Ñ–æ—Ç–æ –ø–æ—Å—Ç–∞
    video_post = State() #–≤–∏–¥–µ–æ –ø–æ—Å—Ç–∞


type_post = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–¢–µ–∫—Å—Ç–æ–≤—ã–π', callback_data='–¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç')],

     [InlineKeyboardButton(text='–í–∏–¥–µ–æ', callback_data='–í–∏–¥–µ–æ –ø–æ—Å—Ç'),
      InlineKeyboardButton(text='–§–æ—Ç–æ', callback_data='–§–æ—Ç–æ –ø–æ—Å—Ç')],

    [InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='–û—Ç–º–µ–Ω–∞ –ø–æ—Å—Ç–∞')]
])

from AdminPanel.Admins import admins
@router.message(Command(commands=["post"]), F.from_user.id.in_(admins))
async def post(message: Message, state: FSMContext):
    await state.clear()  # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç',
                           reply_markup=type_post)

@router.callback_query(F.data == '–û—Ç–º–µ–Ω–∞ –ø–æ—Å—Ç–∞')
async def close(callback: CallbackQuery, state: FSMContext):
    await state.clear() #–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await callback.answer()  # —á—Ç–æ–±—ã –ø—Ä–æ–ø–∞–ª–∏ —á–∞—Å–∏–∫–∏
    await bot.delete_message(callback.from_user.id, callback.message.message_id)

    await bot.send_message(callback.from_user.id,
                           f"<b>{callback.from_user.first_name}</b>, "
                           f"–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –ø–æ –Ω–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤—É\n\n"
                           f"–ï—Å–ª–∏ –∂–µ–ª–∞–µ—Ç–µ –∏–∑—É—á–∏—Ç—å –ø–ª–æ—â–∞–¥–∫—É, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ªüëá\n<b>¬´–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µüåç¬ª</b>",
                           reply_markup=kb.main_menu)



#–¢–µ–∫—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞
@router.callback_query(F.data == '–¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç')
async def give(callback: CallbackQuery, state: FSMContext):
    await state.clear() #–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await callback.answer()  # —á—Ç–æ–±—ã –ø—Ä–æ–ø–∞–ª–∏ —á–∞—Å–∏–∫–∏
    await bot.delete_message(callback.from_user.id, callback.message.message_id)

    await bot.send_message(callback.from_user.id,
                           f"–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞")
    await state.set_state(Post.text_post)

@router.message(Post.text_post)
async def text(message: Message, state: FSMContext):
    if len(message.text) > 2000:
        await bot.send_message(message.from_user.id,
                               "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—á–µ")
    else:
        await state.update_data(text=message.text)

        data = await state.get_data()

        place_a_post = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å‚úàÔ∏è', callback_data=f"–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å"),
             InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å‚ùå', callback_data='–û—Ç–º–µ–Ω–∞ –ø–æ—Å—Ç–∞')],
        ])

        if data.get('photo') is None and data.get('video') is None: #–ø–æ—Å—Ç –Ω–∞–ø–∏—Å–Ω —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–º
            await bot.send_message(message.from_user.id, f"{data['text']}",
                                   reply_markup=place_a_post)
        elif data.get('photo') is not None: # –ø–æ—Å—Ç —Å –∫–∞—Ä—Ç–∏–Ω–æ–π
            await bot.send_photo(chat_id=message.from_user.id,
                                 photo=data['photo'],
                                 caption=f"{data['text']}",
                                 reply_markup=place_a_post)
            # await bot.send_message(chat_id=message.from_user.id, text=f"{data['photo']}")
        elif data.get('video') is not None: # –ø–æ—Å—Ç —Å –≤–∏–¥–µ–æ
            await bot.send_video(chat_id=message.from_user.id,
                                 video=data['video'],
                                 caption=f"{data['text']}",
                                 reply_markup=place_a_post)


#–§–æ—Ç–æ –ø–æ—Å—Ç
@router.callback_query(F.data == '–§–æ—Ç–æ –ø–æ—Å—Ç')
async def give(callback: CallbackQuery, state: FSMContext):
    await state.clear() #–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await callback.answer()  # —á—Ç–æ–±—ã –ø—Ä–æ–ø–∞–ª–∏ —á–∞—Å–∏–∫–∏
    await bot.delete_message(callback.from_user.id, callback.message.message_id)

    await bot.send_message(callback.from_user.id,
                           f"–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ—Å—Ç–∞")
    await state.set_state(Post.photo_post)
@router.message(lambda message: message.content_type != ContentType.PHOTO, Post.photo_post)
async def handle_no_photo(message: Message, state: FSMContext):
    await bot.send_message(message.from_user.id,
                           "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É")
@router.message(lambda message: message.content_type == ContentType.PHOTO, Post.photo_post)
async def handle_photo(message: Message, state: FSMContext):
    await state.update_data(photo=message.photo[-1].file_id)
    await bot.send_message(message.from_user.id,
                           f"–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞")
    await state.set_state(Post.text_post)



#–í–∏–¥–µ–æ –ø–æ—Å—Ç
@router.callback_query(F.data == '–í–∏–¥–µ–æ –ø–æ—Å—Ç')
async def give(callback: CallbackQuery, state: FSMContext):
    await state.clear() #–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await callback.answer()  # —á—Ç–æ–±—ã –ø—Ä–æ–ø–∞–ª–∏ —á–∞—Å–∏–∫–∏
    await bot.delete_message(callback.from_user.id, callback.message.message_id)

    await bot.send_message(callback.from_user.id,
                           f"–ü—Ä–∏—à–ª–∏—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è –ø–æ—Å—Ç–∞")
    await state.set_state(Post.video_post)
@router.message(lambda message: message.content_type != ContentType.VIDEO, Post.video_post)
async def handle_no_video(message: Message, state: FSMContext):
    await bot.send_message(message.from_user.id,
                           "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –≤–∏–¥–µ–æ")
@router.message(lambda message: message.content_type == ContentType.VIDEO, Post.video_post)
async def handle_video(message: Message, state: FSMContext):
    await state.update_data(video=message.video.file_id)
    await bot.send_message(message.from_user.id,
                           f"–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞")
    await state.set_state(Post.text_post)


#–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
@router.callback_query(F.data == '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å')
async def send(callback: CallbackQuery, state: FSMContext):
    await callback.answer()  # —á—Ç–æ–±—ã –ø—Ä–æ–ø–∞–ª–∏ —á–∞—Å–∏–∫–∏
    await bot.delete_message(callback.from_user.id, callback.message.message_id)

    user_bd = DatabaseClass(TgUserID=callback.from_user.id)

    all_users = await user_bd.select_rows(SelectQuery=f"SELECT TgUserId FROM users WHERE "
                                                      f"Activity = 1;")
    data = await state.get_data()

    await bot.send_message(callback.from_user.id,
                           f"–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∑–∞–ø—É—â–µ–Ω–∞‚úÖ")

    if data.get('photo') is None and data.get('video') is None:  # –ø–æ—Å—Ç –Ω–∞–ø–∏—Å–Ω —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–º
        for tg_user_id in all_users:
            try:
                await bot.send_message(chat_id=tg_user_id['TgUserId'], text=f"{data['text']}")
            except Exception as ex:
                # –°—Ç–∞–≤–∏–º Activity = 1 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await user_bd.update_query(UpdateQuery=f"UPDATE users SET Activity = 0 "
                                                       f"WHERE TgUserId = {tg_user_id['TgUserId']};")
            await asyncio.sleep(0.5)

    elif data.get('photo') is not None:  # –ø–æ—Å—Ç —Å –∫–∞—Ä—Ç–∏–Ω–æ–π
        for tg_user_id in all_users:
            try:
                await bot.send_photo(chat_id=tg_user_id['TgUserId'],
                                     photo=data['photo'],
                                     caption=f"{data['text']}")
            except Exception as ex:
                # –°—Ç–∞–≤–∏–º Activity = 1 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await user_bd.update_query(UpdateQuery=f"UPDATE users SET Activity = 0 "
                                                       f"WHERE TgUserId = {tg_user_id['TgUserId']};")
            await asyncio.sleep(0.5)

    elif data.get('video') is not None:  # –ø–æ—Å—Ç —Å –≤–∏–¥–µ–æ
        for tg_user_id in all_users:
            try:
                await bot.send_video(chat_id=tg_user_id['TgUserId'],
                                     video=data['video'],
                                     caption=f"{data['text']}")
            except Exception as ex:
                # –°—Ç–∞–≤–∏–º Activity = 1 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await user_bd.update_query(UpdateQuery=f"UPDATE users SET Activity = 0 "
                                                       f"WHERE TgUserId = {tg_user_id['TgUserId']};")
            await asyncio.sleep(0.5)

    await state.clear() #–æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ