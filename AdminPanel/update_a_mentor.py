from aiogram import F, Router
from aiogram import Bot, Dispatcher, types
from Config import exemplyar_bot
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.enums import ContentType
from Sub.Subjects import dict_directions
from keyboards import keyboard as kb
from Database.Database import DatabaseClass
import asyncio
import re


bot = exemplyar_bot.bot #–í–∑—è—Ç–æ –∏–∑ —Ñ–∞–π–ª–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞, –≥–¥–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è —Ç–æ–∫–µ–Ω

router = Router()


class UpdateMentor(StatesGroup): #—Ö—Ä–∞–Ω–∏–ª–∏—â–µ –º–∞—à–∏–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –º–µ–Ω—Ç–æ—Ä–∞
    mentor_name = State() #–ò–º—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞
    new_name = State() #–Ω–æ–≤–æ–µ –∏–º—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞
    new_name_card = State() #–Ω–æ–≤–æ–µ –∏–º—è –∫–∞—Ä—Ç–æ—á–∫–∏
    user_id = State() #–Ω–æ–≤—ã–π –∞–π–¥–∏
    new_photo = State() #–Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ
    new_description = State() #–Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    new_subject = State() #–Ω–æ–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    new_price = State() #–Ω–æ–≤–∞—è —Ü–µ–Ω–∞
    new_google_drive = State() #–Ω–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –≥—É–≥–ª –¥–∏—Å–∫







from AdminPanel.Admins import admins
@router.callback_query(F.data == '–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É')
async def upd_mentor(callback: CallbackQuery, state: FSMContext):
    await state.clear() #–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await callback.answer()  # —á—Ç–æ–±—ã –ø—Ä–æ–ø–∞–ª–∏ —á–∞—Å–∏–∫–∏
    await bot.delete_message(callback.from_user.id, callback.message.message_id)

    await bot.send_message(callback.from_user.id,
                           f"–ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è "
                           f"–ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–º–µ–Ω–∞¬ª, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é",
                           reply_markup=kb.cancellation)
    await state.set_state(UpdateMentor.mentor_name)
@router.message(F.text == '–û—Ç–º–µ–Ω–∞')
async def cancellation(message: Message, state: FSMContext):
    await bot.send_message(message.from_user.id,
                           f"<b>{message.from_user.first_name}</b>, "
                           f"–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –ø–æ –Ω–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤—É\n\n"
                           f"–ï—Å–ª–∏ –∂–µ–ª–∞–µ—Ç–µ –∏–∑—É—á–∏—Ç—å –ø–ª–æ—â–∞–¥–∫—É, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ªüëá\n<b>¬´–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µüåç¬ª</b>",
                           reply_markup=kb.main_menu)
    await state.clear()  # –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ


@router.message(UpdateMentor.mentor_name)
async def mentor_name(message: Message, state: FSMContext):
    admin_db = DatabaseClass(TgUserID=message.from_user.id)

    mentor = await admin_db.select_rows(SelectQuery=f"SELECT * FROM mentors WHERE "
                                                          f"Name = '/{message.text}' "
                                                          f"AND Activity = 1;")
    if len(mentor) == 0:
        await bot.send_message(chat_id=message.from_user.id,
                               text=f"–¢–∞–∫–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è "
                                    f"–ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
    else:
        for info in mentor:  # –ø—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ —Å–ø–∏—Å–∫—É, –Ω–æ –≤ –Ω—ë–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ–¥–∏–Ω –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫
            mentor_photo = info['Photo']
            mentor_id = info['Id']
            mentor_name = info['OfficialName']
            mentor_card_name = info['Name']
            subject = info['Subject']
            description = info['Description']
            detailed_information = info['DetailedInformation']
            price = info['Price']

            update_men = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='–ò–º—è', callback_data=f"–ò–º—è –º–µ–Ω—Ç–æ—Ä–∞{mentor_id}"),
                 InlineKeyboardButton(text='–ò–º. –∫–∞—Ä—Ç.', callback_data=f"–ò–º—è –∫–∞—Ä—Ç–æ—á–∫–∏{mentor_id}")],

                [InlineKeyboardButton(text='Id', callback_data=f"Tg_user_id{mentor_id}"),
                 InlineKeyboardButton(text='–§–æ—Ç–æ', callback_data=f"–§–æ—Ç–æ –∫–∞—Ä—Ç–æ—á–∫–∏{mentor_id}")],

                [InlineKeyboardButton(text='–û–ø–∏—Å–∞–Ω–∏–µ', callback_data=f"–û–ø–∏—Å–∞–Ω–∏–µ{mentor_id}"),
                 InlineKeyboardButton(text='–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', callback_data=f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ{mentor_id}")],

                [InlineKeyboardButton(text='–¶–µ–Ω–∞', callback_data=f"–¶–µ–Ω–∞{mentor_id}"),
                 InlineKeyboardButton(text='–ì—É–≥–ª –¥–∏—Å–∫', callback_data=f"–ì—É–≥–ª –¥–∏—Å–∫{mentor_id}")],

                [InlineKeyboardButton(text='–í—ã–π—Ç–∏', callback_data='–û—Ç–º–µ–Ω–∞ –ø–æ—Å—Ç–∞')]
            ])

            await bot.send_photo(chat_id=message.from_user.id,
                                 photo=mentor_photo,
                                 caption=f"<b>{mentor_name}</b> ({subject})\n"
                                         f"{mentor_card_name[1:]}\n\n"
                                         f"{description}\n"
                                         f"<a href='{detailed_information}'>–ø–æ–¥—Ä–æ–±–Ω–µ–µ..</a>\n"
                                         f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {price}",
                                 reply_markup=update_men)
            await asyncio.sleep(0.5)
            await bot.send_message(chat_id=message.from_user.id,
                                   text=f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –∫–∞—Ä—Ç–æ—á–∫–µüëÜ")






#–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –º–µ–Ω—Ç–æ—Ä–∞
@router.callback_query((F.data)[:11] == '–ò–º—è –º–µ–Ω—Ç–æ—Ä–∞')
async def update_mentor_men(callback: CallbackQuery, state: FSMContext):
    await state.clear() #–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await callback.answer()  # —á—Ç–æ–±—ã –ø—Ä–æ–ø–∞–ª–∏ —á–∞—Å–∏–∫–∏
    await bot.delete_message(callback.from_user.id, callback.message.message_id)

    await state.update_data(MentorID=callback.data[11:])

    await bot.send_message(chat_id=callback.from_user.id,
                           text=f"–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞")
    await state.set_state(UpdateMentor.new_name)
@router.message(UpdateMentor.new_name)
async def update_mentor_men(message: Message, state: FSMContext):
    admin_db = DatabaseClass(TgUserID=message.from_user.id)

    if len(message.text) > 35:
        await bot.send_message(message.from_user.id,
                               "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—á–µ")
    else:
        try:
            data = await state.get_data()
            await admin_db.update_query(UpdateQuery=f"UPDATE mentors SET OfficialName = '{message.text}' "
                                                           f"WHERE Id = {data['MentorID']};")

            mentor = await admin_db.select_rows(SelectQuery=f"SELECT * FROM mentors WHERE "
                                                            f"Id = {data['MentorID']};")

            for info in mentor:  # –ø—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ —Å–ø–∏—Å–∫—É, –Ω–æ –≤ –Ω—ë–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ–¥–∏–Ω –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫
                mentor_photo = info['Photo']
                mentor_id = info['Id']
                mentor_name = info['OfficialName']
                mentor_card_name = info['Name']
                subject = info['Subject']
                description = info['Description']
                detailed_information = info['DetailedInformation']
                price = info['Price']

                update_men = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text='–ò–º—è', callback_data=f"–ò–º—è –º–µ–Ω—Ç–æ—Ä–∞{mentor_id}"),
                     InlineKeyboardButton(text='–ò–º. –∫–∞—Ä—Ç.', callback_data=f"–ò–º—è –∫–∞—Ä—Ç–æ—á–∫–∏{mentor_id}")],

                    [InlineKeyboardButton(text='Id', callback_data=f"Tg_user_id{mentor_id}"),
                     InlineKeyboardButton(text='–§–æ—Ç–æ', callback_data=f"–§–æ—Ç–æ –∫–∞—Ä—Ç–æ—á–∫–∏{mentor_id}")],

                    [InlineKeyboardButton(text='–û–ø–∏—Å–∞–Ω–∏–µ', callback_data=f"–û–ø–∏—Å–∞–Ω–∏–µ{mentor_id}"),
                     InlineKeyboardButton(text='–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', callback_data=f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ{mentor_id}")],

                    [InlineKeyboardButton(text='–¶–µ–Ω–∞', callback_data=f"–¶–µ–Ω–∞{mentor_id}"),
                     InlineKeyboardButton(text='–ì—É–≥–ª –¥–∏—Å–∫', callback_data=f"–ì—É–≥–ª –¥–∏—Å–∫{mentor_id}")],

                    [InlineKeyboardButton(text='–í—ã–π—Ç–∏', callback_data='–û—Ç–º–µ–Ω–∞ –ø–æ—Å—Ç–∞')]
                ])

                await bot.send_photo(chat_id=message.from_user.id,
                                     photo=mentor_photo,
                                     caption=f"<b>{mentor_name}</b> ({subject})\n"
                                             f"{mentor_card_name[1:]}\n\n"
                                             f"{description}\n"
                                             f"<a href='{detailed_information}'>–ø–æ–¥—Ä–æ–±–Ω–µ–µ..</a>\n"
                                             f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {price}",
                                     reply_markup=update_men)
                await asyncio.sleep(0.5)
                await bot.send_message(chat_id=message.from_user.id,
                                       text=f"–í—ã–±–µ—Ä–∏—Ç–µ, –Ω—É–∂–Ω–æ –ª–∏ –µ—â—ë —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –∫–∞—Ä—Ç–æ—á–∫–µüëÜ")
        except Exception:
            await bot.send_message(message.from_user.id,
                                   "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ä–æ—á—Ç–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

        await state.clear()  # –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ










#–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –º–µ–Ω—Ç–æ—Ä–∞
@router.callback_query((F.data)[:12] == '–ò–º—è –∫–∞—Ä—Ç–æ—á–∫–∏')
async def update_mentor_men(callback: CallbackQuery, state: FSMContext):
    await state.clear() #–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await callback.answer()  # —á—Ç–æ–±—ã –ø—Ä–æ–ø–∞–ª–∏ —á–∞—Å–∏–∫–∏
    await bot.delete_message(callback.from_user.id, callback.message.message_id)

    await state.update_data(MentorID=callback.data[12:])

    await bot.send_message(chat_id=callback.from_user.id,
                           text=f"–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –∫–∞—Ä—Ç–æ—á–∫–∏")
    await state.set_state(UpdateMentor.new_name_card)
@router.message(UpdateMentor.new_name_card)
async def update_mentor_men(message: Message, state: FSMContext):
    admin_db = DatabaseClass(TgUserID=message.from_user.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –∞–Ω–≥–ª –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä
    if re.match('^[A-Za-z0-9_]+$', message.text):
        name_check = await admin_db.select_rows(SelectQuery=f"SELECT Id FROM mentors WHERE "
                                                            f"Name = '/{message.text}' "
                                                            f"AND Activity = 1;")
        if len(name_check) == 0:  # –º–µ–Ω—Ç–æ—Ä–∞ —Å —Ç–∞–∫–æ–π –∫–∞—Ä—Ç–æ—á–∫–æ–π –Ω–µ—Ç –≤ –±–∞–∑–µ, –ø–æ—ç—Ç–æ–º—É –≤—Å—ë –ø–æ–¥—Ö–æ–¥–∏—Ç –∏ –∏–¥—ë–º –¥–∞–ª—å—à–µ
            if len(message.text) > 35:
                await bot.send_message(message.from_user.id,
                                       "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è –∫–∞—Ä—Ç–æ—á–∫–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—á–µ")
            else:
                try:
                    data = await state.get_data()
                    await admin_db.update_query(UpdateQuery=f"UPDATE mentors SET Name = '/{message.text}' "
                                                                   f"WHERE Id = {data['MentorID']};")

                    mentor = await admin_db.select_rows(SelectQuery=f"SELECT * FROM mentors WHERE "
                                                                    f"Id = {data['MentorID']};")

                    for info in mentor:  # –ø—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ —Å–ø–∏—Å–∫—É, –Ω–æ –≤ –Ω—ë–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ–¥–∏–Ω –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫
                        mentor_photo = info['Photo']
                        mentor_id = info['Id']
                        mentor_name = info['OfficialName']
                        mentor_card_name = info['Name']
                        subject = info['Subject']
                        description = info['Description']
                        detailed_information = info['DetailedInformation']
                        price = info['Price']

                        update_men = InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text='–ò–º—è', callback_data=f"–ò–º—è –º–µ–Ω—Ç–æ—Ä–∞{mentor_id}"),
                             InlineKeyboardButton(text='–ò–º. –∫–∞—Ä—Ç.', callback_data=f"–ò–º—è –∫–∞—Ä—Ç–æ—á–∫–∏{mentor_id}")],

                            [InlineKeyboardButton(text='Id', callback_data=f"Tg_user_id{mentor_id}"),
                             InlineKeyboardButton(text='–§–æ—Ç–æ', callback_data=f"–§–æ—Ç–æ –∫–∞—Ä—Ç–æ—á–∫–∏{mentor_id}")],

                            [InlineKeyboardButton(text='–û–ø–∏—Å–∞–Ω–∏–µ', callback_data=f"–û–ø–∏—Å–∞–Ω–∏–µ{mentor_id}"),
                             InlineKeyboardButton(text='–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', callback_data=f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ{mentor_id}")],

                            [InlineKeyboardButton(text='–¶–µ–Ω–∞', callback_data=f"–¶–µ–Ω–∞{mentor_id}"),
                             InlineKeyboardButton(text='–ì—É–≥–ª –¥–∏—Å–∫', callback_data=f"–ì—É–≥–ª –¥–∏—Å–∫{mentor_id}")],

                            [InlineKeyboardButton(text='–í—ã–π—Ç–∏', callback_data='–û—Ç–º–µ–Ω–∞ –ø–æ—Å—Ç–∞')]
                        ])

                        await bot.send_photo(chat_id=message.from_user.id,
                                             photo=mentor_photo,
                                             caption=f"<b>{mentor_name}</b> ({subject})\n"
                                                     f"{mentor_card_name[1:]}\n\n"
                                                     f"{description}\n"
                                                     f"<a href='{detailed_information}'>–ø–æ–¥—Ä–æ–±–Ω–µ–µ..</a>\n"
                                                     f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {price}",
                                             reply_markup=update_men)
                        await asyncio.sleep(0.5)
                        await bot.send_message(chat_id=message.from_user.id,
                                               text=f"–í—ã–±–µ—Ä–∏—Ç–µ, –Ω—É–∂–Ω–æ –ª–∏ –µ—â—ë —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –∫–∞—Ä—Ç–æ—á–∫–µüëÜ")
                except Exception:
                    await bot.send_message(message.from_user.id,
                                           "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ä–æ—á—Ç–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

                await state.clear()  # –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        else:
            await bot.send_message(message.from_user.id,
                                   "–ú–µ–Ω—Ç–æ—Ä —Å —Ç–∞–∫–æ–π –∫–∞—Ä—Ç–æ—á–∫–æ–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏")
    else:
        await bot.send_message(message.from_user.id,
                               "–ò–º—è –∫–∞—Ä—Ç–æ—Ç–æ—á–∫–∏ –ø–∏—à–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ, "
                               "–Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∞–∂—Ç—å –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤")














#–ò–∑–º–µ–Ω–µ–Ω–∏–µ id –º–µ–Ω—Ç–æ—Ä–∞
@router.callback_query((F.data)[:10] == 'Tg_user_id')
async def update_mentor_men(callback: CallbackQuery, state: FSMContext):
    await state.clear() #–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await callback.answer()  # —á—Ç–æ–±—ã –ø—Ä–æ–ø–∞–ª–∏ —á–∞—Å–∏–∫–∏
    await bot.delete_message(callback.from_user.id, callback.message.message_id)

    await state.update_data(MentorID=callback.data[10:])

    await bot.send_message(chat_id=callback.from_user.id,
                           text=f"–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ id –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞")
    await state.set_state(UpdateMentor.user_id)
@router.message(UpdateMentor.user_id)
async def update_mentor_men(message: Message, state: FSMContext):
    admin_db = DatabaseClass(TgUserID=message.from_user.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä
    if re.match('^[0-9]+$', message.text):
        mentor_db = DatabaseClass(TgUserID=int(message.text))
        if await mentor_db.check_user_in_the_list() == True: # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∞–π–¥–∏ –µ—Å—Ç—å –≤ –±–∞–∑–µ
            id_user_mentor = (await mentor_db.select_user()).get('Id')
            try:
                data = await state.get_data()
                await admin_db.update_query(UpdateQuery=f"UPDATE mentors SET IdTgUserId = '{id_user_mentor}' "
                                                        f"WHERE Id = {data['MentorID']};")

                mentor = await admin_db.select_rows(SelectQuery=f"SELECT * FROM mentors WHERE "
                                                                f"Id = {data['MentorID']};")

                for info in mentor:  # –ø—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ —Å–ø–∏—Å–∫—É, –Ω–æ –≤ –Ω—ë–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ–¥–∏–Ω –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫
                    mentor_photo = info['Photo']
                    mentor_id = info['Id']
                    mentor_name = info['OfficialName']
                    mentor_card_name = info['Name']
                    subject = info['Subject']
                    description = info['Description']
                    detailed_information = info['DetailedInformation']
                    price = info['Price']

                    update_men = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text='–ò–º—è', callback_data=f"–ò–º—è –º–µ–Ω—Ç–æ—Ä–∞{mentor_id}"),
                         InlineKeyboardButton(text='–ò–º. –∫–∞—Ä—Ç.', callback_data=f"–ò–º—è –∫–∞—Ä—Ç–æ—á–∫–∏{mentor_id}")],

                        [InlineKeyboardButton(text='Id', callback_data=f"Tg_user_id{mentor_id}"),
                         InlineKeyboardButton(text='–§–æ—Ç–æ', callback_data=f"–§–æ—Ç–æ –∫–∞—Ä—Ç–æ—á–∫–∏{mentor_id}")],

                        [InlineKeyboardButton(text='–û–ø–∏—Å–∞–Ω–∏–µ', callback_data=f"–û–ø–∏—Å–∞–Ω–∏–µ{mentor_id}"),
                         InlineKeyboardButton(text='–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', callback_data=f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ{mentor_id}")],

                        [InlineKeyboardButton(text='–¶–µ–Ω–∞', callback_data=f"–¶–µ–Ω–∞{mentor_id}"),
                         InlineKeyboardButton(text='–ì—É–≥–ª –¥–∏—Å–∫', callback_data=f"–ì—É–≥–ª –¥–∏—Å–∫{mentor_id}")],

                        [InlineKeyboardButton(text='–í—ã–π—Ç–∏', callback_data='–û—Ç–º–µ–Ω–∞ –ø–æ—Å—Ç–∞')]
                    ])

                    await bot.send_photo(chat_id=message.from_user.id,
                                         photo=mentor_photo,
                                         caption=f"<b>{mentor_name}</b> ({subject})\n"
                                                 f"{mentor_card_name[1:]}\n\n"
                                                 f"{description}\n"
                                                 f"<a href='{detailed_information}'>–ø–æ–¥—Ä–æ–±–Ω–µ–µ..</a>\n"
                                                 f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {price}",
                                         reply_markup=update_men)
                    await asyncio.sleep(0.5)
                    await bot.send_message(chat_id=message.from_user.id,
                                           text=f"–í—ã–±–µ—Ä–∏—Ç–µ, –Ω—É–∂–Ω–æ –ª–∏ –µ—â—ë —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –∫–∞—Ä—Ç–æ—á–∫–µüëÜ")
            except Exception:
                await bot.send_message(message.from_user.id,
                                       "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ä–æ—á—Ç–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

            await state.clear()  # –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

        else:
            await bot.send_message(message.from_user.id,
                                   "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º id "
                                   "–Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ id")


    else:
        await bot.send_message(message.from_user.id,
                               "id –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä")














#–ò–∑–º–µ–Ω–µ–Ω–∏–µ id –º–µ–Ω—Ç–æ—Ä–∞
@router.callback_query((F.data)[:13] == '–§–æ—Ç–æ –∫–∞—Ä—Ç–æ—á–∫–∏')
async def update_mentor_men(callback: CallbackQuery, state: FSMContext):
    await state.clear() #–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await callback.answer()  # —á—Ç–æ–±—ã –ø—Ä–æ–ø–∞–ª–∏ —á–∞—Å–∏–∫–∏
    await bot.delete_message(callback.from_user.id, callback.message.message_id)

    await state.update_data(MentorID=callback.data[13:])

    await bot.send_message(chat_id=callback.from_user.id,
                           text=f"–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é")
    await state.set_state(UpdateMentor.new_photo)
@router.message(lambda message: message.content_type != ContentType.PHOTO, UpdateMentor.new_photo)
async def handle_no_photo(message: Message, state: FSMContext):
    await bot.send_message(message.from_user.id,
                           "–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞")
@router.message(lambda message: message.content_type == ContentType.PHOTO, UpdateMentor.new_photo)
async def update_mentor_men(message: Message, state: FSMContext):
    admin_db = DatabaseClass(TgUserID=message.from_user.id)

    try:
        data = await state.get_data()
        await admin_db.update_query(UpdateQuery=f"UPDATE mentors SET Photo = '{message.photo[-1].file_id}' "
                                                f"WHERE Id = {data['MentorID']};")

        mentor = await admin_db.select_rows(SelectQuery=f"SELECT * FROM mentors WHERE "
                                                        f"Id = {data['MentorID']};")

        for info in mentor:  # –ø—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ —Å–ø–∏—Å–∫—É, –Ω–æ –≤ –Ω—ë–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ–¥–∏–Ω –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫
            mentor_photo = info['Photo']
            mentor_id = info['Id']
            mentor_name = info['OfficialName']
            mentor_card_name = info['Name']
            subject = info['Subject']
            description = info['Description']
            detailed_information = info['DetailedInformation']
            price = info['Price']

            update_men = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='–ò–º—è', callback_data=f"–ò–º—è –º–µ–Ω—Ç–æ—Ä–∞{mentor_id}"),
                 InlineKeyboardButton(text='–ò–º. –∫–∞—Ä—Ç.', callback_data=f"–ò–º—è –∫–∞—Ä—Ç–æ—á–∫–∏{mentor_id}")],

                [InlineKeyboardButton(text='Id', callback_data=f"Tg_user_id{mentor_id}"),
                 InlineKeyboardButton(text='–§–æ—Ç–æ', callback_data=f"–§–æ—Ç–æ –∫–∞—Ä—Ç–æ—á–∫–∏{mentor_id}")],

                [InlineKeyboardButton(text='–û–ø–∏—Å–∞–Ω–∏–µ', callback_data=f"–û–ø–∏—Å–∞–Ω–∏–µ{mentor_id}"),
                 InlineKeyboardButton(text='–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', callback_data=f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ{mentor_id}")],

                [InlineKeyboardButton(text='–¶–µ–Ω–∞', callback_data=f"–¶–µ–Ω–∞{mentor_id}"),
                 InlineKeyboardButton(text='–ì—É–≥–ª –¥–∏—Å–∫', callback_data=f"–ì—É–≥–ª –¥–∏—Å–∫{mentor_id}")],

                [InlineKeyboardButton(text='–í—ã–π—Ç–∏', callback_data='–û—Ç–º–µ–Ω–∞ –ø–æ—Å—Ç–∞')]
            ])

            await bot.send_photo(chat_id=message.from_user.id,
                                 photo=mentor_photo,
                                 caption=f"<b>{mentor_name}</b> ({subject})\n"
                                         f"{mentor_card_name[1:]}\n\n"
                                         f"{description}\n"
                                         f"<a href='{detailed_information}'>–ø–æ–¥—Ä–æ–±–Ω–µ–µ..</a>\n"
                                         f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {price}",
                                 reply_markup=update_men)
            await asyncio.sleep(0.5)
            await bot.send_message(chat_id=message.from_user.id,
                                   text=f"–í—ã–±–µ—Ä–∏—Ç–µ, –Ω—É–∂–Ω–æ –ª–∏ –µ—â—ë —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –∫–∞—Ä—Ç–æ—á–∫–µüëÜ")
    except Exception:
        await bot.send_message(message.from_user.id,
                               "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ä–æ—á—Ç–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

    await state.clear()  # –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ















#–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
@router.callback_query((F.data)[:8] == '–û–ø–∏—Å–∞–Ω–∏–µ')
async def update_mentor_men(callback: CallbackQuery, state: FSMContext):
    await state.clear() #–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await callback.answer()  # —á—Ç–æ–±—ã –ø—Ä–æ–ø–∞–ª–∏ —á–∞—Å–∏–∫–∏
    await bot.delete_message(callback.from_user.id, callback.message.message_id)

    await state.update_data(MentorID=callback.data[8:])

    await bot.send_message(chat_id=callback.from_user.id,
                           text=f"–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏")
    await state.set_state(UpdateMentor.new_description)
@router.message(UpdateMentor.new_description)
async def update_mentor_men(message: Message, state: FSMContext):
    admin_db = DatabaseClass(TgUserID=message.from_user.id)

    if len(message.text) > 150:
        await bot.send_message(message.from_user.id,
                               "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—á–µ")
    else:
        try:
            data = await state.get_data()
            await admin_db.update_query(UpdateQuery=f"UPDATE mentors SET Description = '{message.text}' "
                                                           f"WHERE Id = {data['MentorID']};")

            mentor = await admin_db.select_rows(SelectQuery=f"SELECT * FROM mentors WHERE "
                                                            f"Id = {data['MentorID']};")

            for info in mentor:  # –ø—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ —Å–ø–∏—Å–∫—É, –Ω–æ –≤ –Ω—ë–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ–¥–∏–Ω –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫
                mentor_photo = info['Photo']
                mentor_id = info['Id']
                mentor_name = info['OfficialName']
                mentor_card_name = info['Name']
                subject = info['Subject']
                description = info['Description']
                detailed_information = info['DetailedInformation']
                price = info['Price']

                update_men = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text='–ò–º—è', callback_data=f"–ò–º—è –º–µ–Ω—Ç–æ—Ä–∞{mentor_id}"),
                     InlineKeyboardButton(text='–ò–º. –∫–∞—Ä—Ç.', callback_data=f"–ò–º—è –∫–∞—Ä—Ç–æ—á–∫–∏{mentor_id}")],

                    [InlineKeyboardButton(text='Id', callback_data=f"Tg_user_id{mentor_id}"),
                     InlineKeyboardButton(text='–§–æ—Ç–æ', callback_data=f"–§–æ—Ç–æ –∫–∞—Ä—Ç–æ—á–∫–∏{mentor_id}")],

                    [InlineKeyboardButton(text='–û–ø–∏—Å–∞–Ω–∏–µ', callback_data=f"–û–ø–∏—Å–∞–Ω–∏–µ{mentor_id}"),
                     InlineKeyboardButton(text='–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', callback_data=f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ{mentor_id}")],

                    [InlineKeyboardButton(text='–¶–µ–Ω–∞', callback_data=f"–¶–µ–Ω–∞{mentor_id}"),
                     InlineKeyboardButton(text='–ì—É–≥–ª –¥–∏—Å–∫', callback_data=f"–ì—É–≥–ª –¥–∏—Å–∫{mentor_id}")],

                    [InlineKeyboardButton(text='–í—ã–π—Ç–∏', callback_data='–û—Ç–º–µ–Ω–∞ –ø–æ—Å—Ç–∞')]
                ])

                await bot.send_photo(chat_id=message.from_user.id,
                                     photo=mentor_photo,
                                     caption=f"<b>{mentor_name}</b> ({subject})\n"
                                             f"{mentor_card_name[1:]}\n\n"
                                             f"{description}\n"
                                             f"<a href='{detailed_information}'>–ø–æ–¥—Ä–æ–±–Ω–µ–µ..</a>\n"
                                             f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {price}",
                                     reply_markup=update_men)
                await asyncio.sleep(0.5)
                await bot.send_message(chat_id=message.from_user.id,
                                       text=f"–í—ã–±–µ—Ä–∏—Ç–µ, –Ω—É–∂–Ω–æ –ª–∏ –µ—â—ë —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –∫–∞—Ä—Ç–æ—á–∫–µüëÜ")
        except Exception:
            await bot.send_message(message.from_user.id,
                                   "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ä–æ—á—Ç–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

        await state.clear()  # –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
















#–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
@router.callback_query((F.data)[:11] == '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')
async def update_mentor_men(callback: CallbackQuery, state: FSMContext):
    await state.clear() #–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await callback.answer()  # —á—Ç–æ–±—ã –ø—Ä–æ–ø–∞–ª–∏ —á–∞—Å–∏–∫–∏
    await bot.delete_message(callback.from_user.id, callback.message.message_id)

    await state.update_data(MentorID=callback.data[11:])

    str_directions = ", ".join(list(dict_directions.values()))
    await bot.send_message(callback.from_user.id,
                           f"{str_directions}")

    await bot.send_message(chat_id=callback.from_user.id,
                           text=f"‚òùÔ∏è–°–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π. –ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ –∫–∞–∫–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é "
                           f"–±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫")
    await state.set_state(UpdateMentor.new_subject)
@router.message(UpdateMentor.new_subject)
async def update_mentor_men(message: Message, state: FSMContext):
    admin_db = DatabaseClass(TgUserID=message.from_user.id)

    if message.text not in list(dict_directions.values()): #–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —á—Ç–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–∏—Å–∞–Ω–æ –∞–¥–º–∏–Ω–æ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ
        await bot.send_message(message.from_user.id,
                               "–¢–∞–∫–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, –Ω–∞–ø–∏—à–∏—Ç–µ –¥—Ä—É–≥–æ–µ")
    else:
        try:
            data = await state.get_data()
            await admin_db.update_query(UpdateQuery=f"UPDATE mentors SET Subject = '{message.text}' "
                                                           f"WHERE Id = {data['MentorID']};")

            mentor = await admin_db.select_rows(SelectQuery=f"SELECT * FROM mentors WHERE "
                                                            f"Id = {data['MentorID']};")

            for info in mentor:  # –ø—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ —Å–ø–∏—Å–∫—É, –Ω–æ –≤ –Ω—ë–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ–¥–∏–Ω –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫
                mentor_photo = info['Photo']
                mentor_id = info['Id']
                mentor_name = info['OfficialName']
                mentor_card_name = info['Name']
                subject = info['Subject']
                description = info['Description']
                detailed_information = info['DetailedInformation']
                price = info['Price']

                update_men = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text='–ò–º—è', callback_data=f"–ò–º—è –º–µ–Ω—Ç–æ—Ä–∞{mentor_id}"),
                     InlineKeyboardButton(text='–ò–º. –∫–∞—Ä—Ç.', callback_data=f"–ò–º—è –∫–∞—Ä—Ç–æ—á–∫–∏{mentor_id}")],

                    [InlineKeyboardButton(text='Id', callback_data=f"Tg_user_id{mentor_id}"),
                     InlineKeyboardButton(text='–§–æ—Ç–æ', callback_data=f"–§–æ—Ç–æ –∫–∞—Ä—Ç–æ—á–∫–∏{mentor_id}")],

                    [InlineKeyboardButton(text='–û–ø–∏—Å–∞–Ω–∏–µ', callback_data=f"–û–ø–∏—Å–∞–Ω–∏–µ{mentor_id}"),
                     InlineKeyboardButton(text='–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', callback_data=f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ{mentor_id}")],

                    [InlineKeyboardButton(text='–¶–µ–Ω–∞', callback_data=f"–¶–µ–Ω–∞{mentor_id}"),
                     InlineKeyboardButton(text='–ì—É–≥–ª –¥–∏—Å–∫', callback_data=f"–ì—É–≥–ª –¥–∏—Å–∫{mentor_id}")],

                    [InlineKeyboardButton(text='–í—ã–π—Ç–∏', callback_data='–û—Ç–º–µ–Ω–∞ –ø–æ—Å—Ç–∞')]
                ])

                await bot.send_photo(chat_id=message.from_user.id,
                                     photo=mentor_photo,
                                     caption=f"<b>{mentor_name}</b> ({subject})\n"
                                             f"{mentor_card_name[1:]}\n\n"
                                             f"{description}\n"
                                             f"<a href='{detailed_information}'>–ø–æ–¥—Ä–æ–±–Ω–µ–µ..</a>\n"
                                             f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {price}",
                                     reply_markup=update_men)
                await asyncio.sleep(0.5)
                await bot.send_message(chat_id=message.from_user.id,
                                       text=f"–í—ã–±–µ—Ä–∏—Ç–µ, –Ω—É–∂–Ω–æ –ª–∏ –µ—â—ë —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –∫–∞—Ä—Ç–æ—á–∫–µüëÜ")
        except Exception:
            await bot.send_message(message.from_user.id,
                                   "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ä–æ—á—Ç–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

        await state.clear()  # –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ














#–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
@router.callback_query((F.data)[:4] == '–¶–µ–Ω–∞')
async def update_mentor_men(callback: CallbackQuery, state: FSMContext):
    await state.clear() #–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await callback.answer()  # —á—Ç–æ–±—ã –ø—Ä–æ–ø–∞–ª–∏ —á–∞—Å–∏–∫–∏
    await bot.delete_message(callback.from_user.id, callback.message.message_id)

    await state.update_data(MentorID=callback.data[4:])

    await bot.send_message(chat_id=callback.from_user.id,
                           text=f"–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏—è —Å –º–µ–Ω—Ç–æ—Ä–æ–º\n"
                           f"–ü—Ä–∏–º–µ—Ä: ¬´1500—Ä –∑–∞ –∑–∞–Ω—è—Ç–∏–µ¬ª –∏–ª–∏ ¬´250.000—Ä –∑–∞ –∫—É—Ä—Å/–≤–µ–¥–µ–Ω–∏–µ¬ª")
    await state.set_state(UpdateMentor.new_price)
@router.message(UpdateMentor.new_price)
async def update_mentor_men(message: Message, state: FSMContext):
    admin_db = DatabaseClass(TgUserID=message.from_user.id)

    if len(message.text) > 35:
        await bot.send_message(message.from_user.id,
                               f"–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—á–µ")
    else:
        try:
            data = await state.get_data()
            await admin_db.update_query(UpdateQuery=f"UPDATE mentors SET Price = '{message.text}' "
                                                           f"WHERE Id = {data['MentorID']};")

            mentor = await admin_db.select_rows(SelectQuery=f"SELECT * FROM mentors WHERE "
                                                            f"Id = {data['MentorID']};")

            for info in mentor:  # –ø—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ —Å–ø–∏—Å–∫—É, –Ω–æ –≤ –Ω—ë–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ–¥–∏–Ω –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫
                mentor_photo = info['Photo']
                mentor_id = info['Id']
                mentor_name = info['OfficialName']
                mentor_card_name = info['Name']
                subject = info['Subject']
                description = info['Description']
                detailed_information = info['DetailedInformation']
                price = info['Price']

                update_men = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text='–ò–º—è', callback_data=f"–ò–º—è –º–µ–Ω—Ç–æ—Ä–∞{mentor_id}"),
                     InlineKeyboardButton(text='–ò–º. –∫–∞—Ä—Ç.', callback_data=f"–ò–º—è –∫–∞—Ä—Ç–æ—á–∫–∏{mentor_id}")],

                    [InlineKeyboardButton(text='Id', callback_data=f"Tg_user_id{mentor_id}"),
                     InlineKeyboardButton(text='–§–æ—Ç–æ', callback_data=f"–§–æ—Ç–æ –∫–∞—Ä—Ç–æ—á–∫–∏{mentor_id}")],

                    [InlineKeyboardButton(text='–û–ø–∏—Å–∞–Ω–∏–µ', callback_data=f"–û–ø–∏—Å–∞–Ω–∏–µ{mentor_id}"),
                     InlineKeyboardButton(text='–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', callback_data=f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ{mentor_id}")],

                    [InlineKeyboardButton(text='–¶–µ–Ω–∞', callback_data=f"–¶–µ–Ω–∞{mentor_id}"),
                     InlineKeyboardButton(text='–ì—É–≥–ª –¥–∏—Å–∫', callback_data=f"–ì—É–≥–ª –¥–∏—Å–∫{mentor_id}")],

                    [InlineKeyboardButton(text='–í—ã–π—Ç–∏', callback_data='–û—Ç–º–µ–Ω–∞ –ø–æ—Å—Ç–∞')]
                ])

                await bot.send_photo(chat_id=message.from_user.id,
                                     photo=mentor_photo,
                                     caption=f"<b>{mentor_name}</b> ({subject})\n"
                                             f"{mentor_card_name[1:]}\n\n"
                                             f"{description}\n"
                                             f"<a href='{detailed_information}'>–ø–æ–¥—Ä–æ–±–Ω–µ–µ..</a>\n"
                                             f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {price}",
                                     reply_markup=update_men)
                await asyncio.sleep(0.5)
                await bot.send_message(chat_id=message.from_user.id,
                                       text=f"–í—ã–±–µ—Ä–∏—Ç–µ, –Ω—É–∂–Ω–æ –ª–∏ –µ—â—ë —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –∫–∞—Ä—Ç–æ—á–∫–µüëÜ")
        except Exception:
            await bot.send_message(message.from_user.id,
                                   "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ä–æ—á—Ç–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

        await state.clear()  # –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ










#–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥—É–≥–ª –¥–∏—Å–∫
@router.callback_query((F.data)[:9] == '–ì—É–≥–ª –¥–∏—Å–∫')
async def update_mentor_men(callback: CallbackQuery, state: FSMContext):
    await state.clear() #–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await callback.answer()  # —á—Ç–æ–±—ã –ø—Ä–æ–ø–∞–ª–∏ —á–∞—Å–∏–∫–∏
    await bot.delete_message(callback.from_user.id, callback.message.message_id)

    await state.update_data(MentorID=callback.data[9:])

    await bot.send_message(chat_id=callback.from_user.id,
                           text=f"–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≥—É–≥–ª –¥–∏—Å–∫")
    await state.set_state(UpdateMentor.new_google_drive)

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ Google Drive
GOOGLE_DRIVE_LINK_PATTERN = re.compile(r'https://docs.google.com/\S+')

@router.message(UpdateMentor.new_google_drive)
async def update_mentor_men(message: Message, state: FSMContext):
    admin_db = DatabaseClass(TgUserID=message.from_user.id)

    if GOOGLE_DRIVE_LINK_PATTERN.match(message.text):
        try:
            data = await state.get_data()
            await admin_db.update_query(UpdateQuery=f"UPDATE mentors SET DetailedInformation = '{message.text}' "
                                                           f"WHERE Id = {data['MentorID']};")

            mentor = await admin_db.select_rows(SelectQuery=f"SELECT * FROM mentors WHERE "
                                                            f"Id = {data['MentorID']};")

            for info in mentor:  # –ø—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ —Å–ø–∏—Å–∫—É, –Ω–æ –≤ –Ω—ë–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ–¥–∏–Ω –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫
                mentor_photo = info['Photo']
                mentor_id = info['Id']
                mentor_name = info['OfficialName']
                mentor_card_name = info['Name']
                subject = info['Subject']
                description = info['Description']
                detailed_information = info['DetailedInformation']
                price = info['Price']

                update_men = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text='–ò–º—è', callback_data=f"–ò–º—è –º–µ–Ω—Ç–æ—Ä–∞{mentor_id}"),
                     InlineKeyboardButton(text='–ò–º. –∫–∞—Ä—Ç.', callback_data=f"–ò–º—è –∫–∞—Ä—Ç–æ—á–∫–∏{mentor_id}")],

                    [InlineKeyboardButton(text='Id', callback_data=f"Tg_user_id{mentor_id}"),
                     InlineKeyboardButton(text='–§–æ—Ç–æ', callback_data=f"–§–æ—Ç–æ –∫–∞—Ä—Ç–æ—á–∫–∏{mentor_id}")],

                    [InlineKeyboardButton(text='–û–ø–∏—Å–∞–Ω–∏–µ', callback_data=f"–û–ø–∏—Å–∞–Ω–∏–µ{mentor_id}"),
                     InlineKeyboardButton(text='–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', callback_data=f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ{mentor_id}")],

                    [InlineKeyboardButton(text='–¶–µ–Ω–∞', callback_data=f"–¶–µ–Ω–∞{mentor_id}"),
                     InlineKeyboardButton(text='–ì—É–≥–ª –¥–∏—Å–∫', callback_data=f"–ì—É–≥–ª –¥–∏—Å–∫{mentor_id}")],

                    [InlineKeyboardButton(text='–í—ã–π—Ç–∏', callback_data='–û—Ç–º–µ–Ω–∞ –ø–æ—Å—Ç–∞')]
                ])

                await bot.send_photo(chat_id=message.from_user.id,
                                     photo=mentor_photo,
                                     caption=f"<b>{mentor_name}</b> ({subject})\n"
                                             f"{mentor_card_name[1:]}\n\n"
                                             f"{description}\n"
                                             f"<a href='{detailed_information}'>–ø–æ–¥—Ä–æ–±–Ω–µ–µ..</a>\n"
                                             f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {price}",
                                     reply_markup=update_men)
                await asyncio.sleep(0.5)
                await bot.send_message(chat_id=message.from_user.id,
                                       text=f"–í—ã–±–µ—Ä–∏—Ç–µ, –Ω—É–∂–Ω–æ –ª–∏ –µ—â—ë —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –∫–∞—Ä—Ç–æ—á–∫–µüëÜ")
        except Exception:
            await bot.send_message(message.from_user.id,
                                   "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ä–æ—á—Ç–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

        await state.clear()  # –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    else:
        await bot.send_message(message.from_user.id,
                               f"–≠—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞ –Ω–∞ –≥—É–≥–ª –¥–∏—Å–∫. –ü—Ä–∏—à–ª–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ")

