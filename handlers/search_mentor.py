from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton, \
    InputMediaPhoto

import asyncio

from aiogram import F, Router
from aiogram import Bot, Dispatcher, types
from Config import exemplyar_bot
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from Database import import_mentors
from keyboards import keyboard as kb

from AdminPanel.Admins import admins
from Database.import_mentors import select_mentors_from_db, current_mentors_data
from Sub.Subjects import dict_directions

from Database.Database import DatabaseClass

bot = exemplyar_bot.bot #–í–∑—è—Ç–æ –∏–∑ —Ñ–∞–π–ª–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞, –≥–¥–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è —Ç–æ–∫–µ–Ω

router = Router()


directions = list(dict_directions.keys()) # –≤—Å–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è


@router.message(F.text.in_(directions))
async def search_tutor(message: Message, state: FSMContext):
    await state.clear() #–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    current_mentors_data = import_mentors.current_mentors_data
    if current_mentors_data is not None:
        direction = dict_directions[message.text] # –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        # dict_mentors_sort = (await select_mentors_from_db())["–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∏ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º"]
        dict_mentors_sort = current_mentors_data["–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∏ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º"]

        try:
            mentors = dict_mentors_sort[direction]

            list_mentors = ''
            star = ''
            for mentor in mentors:
                mentor_name,  description, price = mentor['Name'], mentor['Description'], mentor['Price']
                if mentor['CallOrder'] == 1:
                    list_mentors += f"<b>{mentor_name}</b>üåü - {price}\n\n"
                else:
                    list_mentors += f"<b>{mentor_name}</b> - {price}\n\n"

            await bot.send_message(message.from_user.id, f"{list_mentors}",
                                   disable_web_page_preview=True)

        except Exception as ex:
            await bot.send_message(message.from_user.id, f"<b>–ü—Ä–æ–≤–æ–¥–∏—Ç—Å—è –Ω–∞–±–æ—Ä –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å‚ùóÔ∏è</b>\n"
                                                         f"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤ –ø–æ —ç—Ç–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –Ω–µ—Ç",
                                   disable_web_page_preview=True)
            print(f"–ù–µ—Ç –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤ –Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {message.text}")
            print(ex)

    else:
        await bot.send_message(message.from_user.id, f"–ë–∞–∑–∞ –º–µ–Ω—Ç–æ—Ä–æ–≤ –≤—ã–≥—Ä—É–∂–∞–µ—Ç—Å—è\n"
                                                     f"–≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è‚è≥",
                               disable_web_page_preview=True)


@router.message((F.text)[0]=='/')
async def scss(message: Message, state: FSMContext):
    await state.clear() #–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    current_mentors_data = import_mentors.current_mentors_data
    if current_mentors_data is not None:
        try:
            # dict_mentors = (await select_mentors_from_db())["–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ–Ω—Ç–æ—Ä–∞—Ö –∏–∑ –±–∞–∑—ã"]
            dict_mentors = current_mentors_data["–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ–Ω—Ç–æ—Ä–∞—Ö –∏–∑ –±–∞–∑—ã"]
            mentor = next((item for item in dict_mentors if item['Name'] == f"{message.text}"), None)

            mentor_photo = mentor['Photo']
            mentor_id_tg_user_id = mentor['IdTgUserId']
            mentor_id = mentor['Id']
            mentor_name = mentor['OfficialName']
            description = mentor['Description']
            price = mentor['Price']
            detailed_information = mentor['DetailedInformation']
            call_order = mentor['CallOrder']

            star = ''
            if call_order == 1:
                star = 'üåü'

            bell = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å', callback_data=f"–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å {mentor_id}")],
                [InlineKeyboardButton(text='–ó–∞–∫—Ä—ã—Ç—å', callback_data='–ó–∞–∫—Ä—ã—Ç—å')],
                [InlineKeyboardButton(text='<<', callback_data=f"<<{mentor_id}"), InlineKeyboardButton(text='>>', callback_data=f"{mentor_id}>>")]
                    ])
            await bot.send_photo(chat_id=message.from_user.id,
                                 photo=mentor_photo,
                                 caption=f"<b>{mentor_name}</b>{star}\n\n"
                                         f"{description}\n"
                                         f"<a href='{detailed_information}'>–ø–æ–¥—Ä–æ–±–Ω–µ–µ..</a>\n\n"
                                         f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {price}",
                                 reply_markup=bell)
        except Exception as ex:
            print('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤–≤–µ—Å—Ç–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ —á–µ—Ä–µ–∑ –∑–Ω–∞–∫ ¬´/¬ª')
    else:
        await bot.send_message(message.from_user.id, f"–ë–∞–∑–∞ –º–µ–Ω—Ç–æ—Ä–æ–≤ –≤—ã–≥—Ä—É–∂–∞–µ—Ç—Å—è\n"
                                                     f"–≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è‚è≥",
                               disable_web_page_preview=True)


@router.callback_query( ((F.data)[0:2] == '<<') |  ((F.data)[-2:] == '>>') )
async def close(callback: CallbackQuery, state: FSMContext):
    await state.clear() #–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await callback.answer()  # —á—Ç–æ–±—ã –ø—Ä–æ–ø–∞–ª–∏ —á–∞—Å–∏–∫–∏

    current_mentors_data = import_mentors.current_mentors_data
    if current_mentors_data is not None:
        if (callback.data)[0:2] == '<<':
            id_mentor = int((callback.data)[2:])

            # dict_mentors_sort = (await select_mentors_from_db())["–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∏ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º"]
            # dict_mentors = (await select_mentors_from_db())["–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ–Ω—Ç–æ—Ä–∞—Ö –∏–∑ –±–∞–∑—ã"]
            dict_mentors_sort = current_mentors_data["–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∏ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º"]
            dict_mentors = current_mentors_data["–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ–Ω—Ç–æ—Ä–∞—Ö –∏–∑ –±–∞–∑—ã"]

            mentor = next((item for item in dict_mentors if item['Id'] == id_mentor), None)
            subject = mentor["Subject"] #–≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ

            list_mentor = dict_mentors_sort[subject] # –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ–Ω—Ç–æ—Ä–æ–≤ –ø–æ —ç—Ç–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é

            if len(list_mentor) == 1:
                pass
            else:
                for index, mentor_inf in enumerate(list_mentor): #–Ω–∞—Ö–æ–¥–∏–º –Ω—ã–Ω–µ—à–Ω–µ–≥–æ –º–µ–Ω—Ç–æ—Ä–∞ –∏ –≤—ã–≤–æ–¥–∏–º –Ω–∞ —ç–∫—Ä–∞–Ω —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞ –Ω–∏–º –≤ –æ—á–µ—Ä–µ–¥–∏, –µ—Å–ª–∏ –Ω—ã–Ω–µ—à–Ω–∏–π —è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–º –≤ —Å–ø–∏—Å–∫–µ, —Ç–æ –≤—ã–≤–æ–¥–∏–º –Ω–∞ —ç–∫—Ä–∞–Ω –ø–µ—Ä–≤–æ–≥–æ
                    if mentor_inf.get('Id') == id_mentor:
                        try:
                            mentor = list_mentor[index-1]
                        except:
                            mentor = list_mentor[-1]

                        mentor_photo = mentor['Photo']
                        mentor_id = mentor['Id']
                        mentor_name = mentor['OfficialName']
                        description = mentor['Description']
                        price = mentor['Price']
                        detailed_information = mentor['DetailedInformation']
                        call_order = mentor['CallOrder']

                        star = ''
                        if call_order == 1:
                            star = 'üåü'

                        bell = InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text='–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å', callback_data=f"–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å {mentor_id}")],
                            [InlineKeyboardButton(text='–ó–∞–∫—Ä—ã—Ç—å', callback_data='–ó–∞–∫—Ä—ã—Ç—å')],
                            [InlineKeyboardButton(text='<<', callback_data=f"<<{mentor_id}"),
                             InlineKeyboardButton(text='>>', callback_data=f"{mentor_id}>>")]
                        ])

                        await bot.edit_message_media(
                            chat_id=callback.message.chat.id,
                            message_id=callback.message.message_id,
                            media=InputMediaPhoto(
                                media=mentor_photo,
                                caption=f"<b>{mentor_name}</b>{star}\n\n"
                                                     f"{description}\n"
                                                     f"<a href='{detailed_information}'>–ø–æ–¥—Ä–æ–±–Ω–µ–µ..</a>\n\n"
                                                     f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {price}"),
                            reply_markup=bell
                        )
                        break


        elif (callback.data)[-2:] == '>>':
            id_mentor = int((callback.data)[:-2])

            # dict_mentors_sort = (await select_mentors_from_db())["–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∏ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º"]
            # dict_mentors = (await select_mentors_from_db())["–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ–Ω—Ç–æ—Ä–∞—Ö –∏–∑ –±–∞–∑—ã"]
            dict_mentors_sort = current_mentors_data["–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∏ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º"]
            dict_mentors = current_mentors_data["–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ–Ω—Ç–æ—Ä–∞—Ö –∏–∑ –±–∞–∑—ã"]

            mentor = next((item for item in dict_mentors if item['Id'] == id_mentor), None)
            subject = mentor["Subject"]  # –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ

            list_mentor = dict_mentors_sort[subject]  # –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ–Ω—Ç–æ—Ä–æ–≤ –ø–æ —ç—Ç–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é

            if len(list_mentor) == 1:
                pass
            else:
                for index, mentor_inf in enumerate(list_mentor): #–Ω–∞—Ö–æ–¥–∏–º –Ω—ã–Ω–µ—à–Ω–µ–≥–æ –º–µ–Ω—Ç–æ—Ä–∞ –∏ –≤—ã–≤–æ–¥–∏–º –Ω–∞ —ç–∫—Ä–∞–Ω —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞ –Ω–∏–º –≤ –æ—á–µ—Ä–µ–¥–µ, –µ—Å–ª–∏ –Ω—ã–Ω–µ—à–Ω–∏–π —è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–º –≤ —Å–ø–∏—Å–∫–µ, —Ç–æ –≤—ã–≤–æ–¥–∏–º –Ω–∞ —ç–∫—Ä–∞–Ω –ø–µ—Ä–≤–æ–≥–æ
                    if mentor_inf.get('Id') == id_mentor:
                        try:
                            mentor = list_mentor[index+1]
                        except:
                            mentor = list_mentor[0]

                        mentor_photo = mentor['Photo']
                        mentor_id = mentor['Id']
                        mentor_name = mentor['OfficialName']
                        description = mentor['Description']
                        price = mentor['Price']
                        detailed_information = mentor['DetailedInformation']
                        call_order = mentor['CallOrder']

                        star = ''
                        if call_order == 1:
                            star = 'üåü'

                        bell = InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text='–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å', callback_data=f"–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å {mentor_id}")],
                            [InlineKeyboardButton(text='–ó–∞–∫—Ä—ã—Ç—å', callback_data='–ó–∞–∫—Ä—ã—Ç—å')],
                            [InlineKeyboardButton(text='<<', callback_data=f"<<{mentor_id}"),
                             InlineKeyboardButton(text='>>', callback_data=f"{mentor_id}>>")]
                        ])

                        await bot.edit_message_media(
                            chat_id=callback.message.chat.id,
                            message_id=callback.message.message_id,
                            media=InputMediaPhoto(
                                media=mentor_photo,
                                caption=f"<b>{mentor_name}</b>{star}\n\n"
                                                     f"{description}\n"
                                                     f"<a href='{detailed_information}'>–ø–æ–¥—Ä–æ–±–Ω–µ–µ..</a>\n\n"
                                                     f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {price}"),
                            reply_markup=bell
                        )
                        break
    else:
        await bot.send_message(callback.from_user.id, f"–ë–∞–∑–∞ –º–µ–Ω—Ç–æ—Ä–æ–≤ –≤—ã–≥—Ä—É–∂–∞–µ—Ç—Å—è\n"
                                                     f"–≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è‚è≥",
                               disable_web_page_preview=True)

@router.callback_query(F.data.in_(['–ó–∞–∫—Ä—ã—Ç—å', '–ù–µ—Ç, –Ω–µ –±—Ä–æ–Ω–∏—Ä—É—é']))
async def close(callback: CallbackQuery, state: FSMContext):
    await state.clear() #–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await callback.answer()  # —á—Ç–æ–±—ã –ø—Ä–æ–ø–∞–ª–∏ —á–∞—Å–∏–∫–∏
    await bot.delete_message(callback.from_user.id, callback.message.message_id)

@router.callback_query((F.data)[0:13] == f"–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å")
async def book(callback: CallbackQuery, state: FSMContext):
    await state.clear() #–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    current_mentors_data = import_mentors.current_mentors_data
    if current_mentors_data is not None:
        mentor_id = int(callback.data[14:]) #id –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ–Ω—Ç–æ—Ä–∞

        # dict_mentors = (await select_mentors_from_db())["–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ–Ω—Ç–æ—Ä–∞—Ö –∏–∑ –±–∞–∑—ã"]
        dict_mentors = current_mentors_data["–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ–Ω—Ç–æ—Ä–∞—Ö –∏–∑ –±–∞–∑—ã"]
        mentor = next((item for item in dict_mentors if item['Id'] == mentor_id), None)

        mentor_photo = mentor['Photo']

        yes_or_no = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='–î–∞', callback_data=f"–î–∞, –±—Ä–æ–Ω–∏—Ä—É—é {mentor_id}"),
             InlineKeyboardButton(text='–ù–µ—Ç', callback_data='–ù–µ—Ç, –Ω–µ –±—Ä–æ–Ω–∏—Ä—É—é')]
                ])

        await bot.edit_message_media(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            media=InputMediaPhoto(
                media=mentor_photo,
                caption=f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å –Ω–∞ –≤—Å—Ç—Ä–µ—á—É —Å –º–µ–Ω—Ç–æ—Ä–æ–º"),
            reply_markup=yes_or_no
        )
    else:
        await bot.send_message(callback.from_user.id, f"–û—â–∏–±–∫–∞! –ë–∞–∑–∞ –º–µ–Ω—Ç–æ—Ä–æ–≤ –µ—â—ë –≤—ã–≥—Ä—É–∂–∞–µ—Ç—Å—è\n"
                                                      f"–≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è‚è≥",
                               disable_web_page_preview=True)

@router.callback_query((F.data)[0:12] == f"–î–∞, –±—Ä–æ–Ω–∏—Ä—É—é")
async def book(callback: CallbackQuery, state: FSMContext):
    await state.clear() #–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await callback.answer()  # —á—Ç–æ–±—ã –ø—Ä–æ–ø–∞–ª–∏ —á–∞—Å–∏–∫–∏
    await bot.delete_message(callback.from_user.id, callback.message.message_id)

    current_mentors_data = import_mentors.current_mentors_data
    if current_mentors_data is not None:
        work_database = DatabaseClass(TgUserID=callback.from_user.id)

        mentor_id_tg_user_id = int(callback.data[13:]) #id –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ–Ω—Ç–æ—Ä–∞

        # dict_mentors = (await select_mentors_from_db())["–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ–Ω—Ç–æ—Ä–∞—Ö –∏–∑ –±–∞–∑—ã"]
        dict_mentors = current_mentors_data["–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ–Ω—Ç–æ—Ä–∞—Ö –∏–∑ –±–∞–∑—ã"]
        info_mentor = next((item for item in dict_mentors if item['Id'] == mentor_id_tg_user_id), None)


        id_tg_user_id = info_mentor.get("IdTgUserId")  # –∞–π–¥–∏ –º–µ–Ω—Ç–æ—Ä–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ users
        id_mentor = info_mentor.get("Id")
        subject = info_mentor.get("Subject")
        mentor_name = info_mentor.get("Name")

        # list_user_mentor = (await select_mentors_from_db())["–ù–∞—Å—Ç–∞–≤–Ω–∏–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users"]
        list_user_mentor = current_mentors_data["–ù–∞—Å—Ç–∞–≤–Ω–∏–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users"]

        tg_user_id = next((dict["TgUserId"] for dict in list_user_mentor if dict["Id"] == id_tg_user_id), None)

        try:
            user_name = callback.from_user.username

            await bot.send_message(chat_id=tg_user_id, text=f"üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•\n"
                                                            f"@{user_name} –ø–æ–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ —Ä–∞–±–æ—Ç—É —Å "
                                                            f"–≤–∞–º–∏ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é ¬´{subject}¬ª",
                                   disable_web_page_preview=True)

            await asyncio.sleep(0.5)

            await bot.send_message(callback.from_user.id, f"<b>–ì–æ—Ç–æ–≤–æ ‚úÖ</b>\n\n"
                                                          f"–ù–∞—Å—Ç–∞–≤–Ω–∏–∫ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –ª–∏—á–Ω–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–µ "
                                                          f"–≤ —Ç–µ—á–µ–Ω–∏–µ —Å—É—Ç–æ–∫.\n"
                                                          f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å "
                                                          f"–æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—èüôè",
                                   disable_web_page_preview=True)

            id_user = (await work_database.select_user()).get('Id') # –∞–π–¥–∏ —É—á–µ–Ω–∏–∫–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users

            await work_database.insert_query(InsertQuery=f"INSERT INTO mentorrecords(UserID, MentorUserID, MentorID, Subject) " 
                                           f"VALUES ({id_user}, {mentor_id_tg_user_id}, {id_mentor},'{subject}');") # –∑–∞–Ω–æ—Å–∏–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –º–µ–Ω—Ç–æ—Ä—É –≤ —Ç–∞–±–ª–∏—Ü—É

        except Exception as ex:
            await bot.send_message(chat_id=callback.from_user.id, text=f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã, "
                                                                       f"–≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –æ–Ω –±—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω",
                                   disable_web_page_preview=True)
            await asyncio.sleep(0.5)
            for admin in admins: #—Ä–∞—Å—Å—ã–ª–∫–∞–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
                await bot.send_message(chat_id=admin, text=f"–ù–∞—Å—Ç–∞–≤–Ω–∏–∫ {mentor_name} –æ—Ç–∫–ª—é—á–∏–ª –±–æ—Ç–∞ "
                                                                           f"–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã",
                                       disable_web_page_preview=True)
                await asyncio.sleep(0.5)

    else:
        await bot.send_message(callback.from_user.id, f"–û—â–∏–±–∫–∞! –ë–∞–∑–∞ –º–µ–Ω—Ç–æ—Ä–æ–≤ –µ—â—ë –≤—ã–≥—Ä—É–∂–∞–µ—Ç—Å—è\n"
                                                      f"–≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è‚è≥",
                               disable_web_page_preview=True)